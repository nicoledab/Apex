
public with sharing class LetterMakePDFController {
    public String setSelectedId {get; set;}
    public String downloadUrl {get; set;}

    public LetterMakePDFController(ApexPages.StandardSetController sc){
        System.debug('LetterMakePDFController');
        Id[] selectedIds = new Id[0];
        Set<Id> letterId = new Set<Id>();
        for (Sobject obj : sc.getSelected()){
            System.debug('obj :: ' + obj);
            selectedIds.add(obj.Id);
            letterId.add(obj.Id);
        }
        setSelectedId = JSON.serialize(selectedIds);
        system.debug('setSelectedId-->'+setSelectedId);
    }

    @AuraEnabled
    public static String doValidationCheck(List<String> letterId, String actionName){
        String result = 'success^||^성공';
        try {
            Set<Id> targetId = new Set<Id>();
            for (String obj : letterId){
                targetId.add(obj);
            }
            List<Letter__c> listLetter = new List<Letter__c>();
            listLetter = [
                    SELECT Id, Name, Type__c, If_Send_Yn__c, Child__c, child__r.Country__c
                    FROM Letter__c
                    WHERE Id IN :targetId
            ];

            System.debug(listLetter);

            if (!listLetter.isEmpty()) {

                List<LetterPicture__c> listLetterPhoto = new List<LetterPicture__c>();
                listLetterPhoto = [
                        SELECT      Id, Name, Letter__c
                        FROM        LetterPicture__c
                        WHERE       Letter__c IN :targetId
                        AND         isPDF__c = TRUE
                ];

                Map<String, LetterPicture__c> mapPhoto = new Map<String, LetterPicture__c>();
                if (!listLetterPhoto.isEmpty()) {
                    for(LetterPicture__c objPhoto : listLetterPhoto){
                        mapPhoto.put(objPhoto.Letter__c, objPhoto);
                    }
                }

                String letterType = listLetter[0].If_Send_Yn__c != null ? listLetter[0].If_Send_Yn__c : '';
                String childCountry = listLetter[0].Child__r.Country__c;
                System.debug('letterType :: ' + letterType);
                System.debug('childCountry :: ' + childCountry);

                for (Letter__c obj : listLetter){
                    // 공통
                    if (obj.If_Send_Yn__c != letterType) {
                        result = 'error^||^동일한 타입의 편지만 처리 가능합니다.';
                        break;
                    }
                    // PDF
                    else if (actionName == 'PDF' && !mapPhoto.containsKey(obj.Id)) {
                        result = 'error^||^' + obj.Name  + ' 편지의 PDF 사진이 없습니다.';
                        break;
                    }
                    // pouch
                    else if (actionName == 'PouchMemo' && childCountry == null) {
                        result = 'error^||^아동의 국가가 없습니다.';
                        break;
                    }
                    else if (actionName == 'PouchMemo' && childCountry != null && obj.Child__r.Country__c != childCountry) {
                        result = 'error^||^동일한 국가의 아동만 처리 가능합니다.';
                        break;
                    }
                }
            }
        }
        catch (Exception e){
            result = 'error^||^' + e.getMessage();
        }
        return result;
    }

    @AuraEnabled
    public static String doCreatedPDF(List<String> letterId){
        System.debug('CreatedPDF');
        String result = '';
        try{
            Set<Id> targetId = new Set<Id>();
            for (String obj : letterId){
                targetId.add(obj);
            }

            List<LetterPicture__c> listPhoto = new List<LetterPicture__c>();
            listPhoto = [
                    SELECT Id, Letter__r.Name, PictureDir__c, fm_PictureDir__c
                    FROM LetterPicture__c
                    WHERE isPDF__c = TRUE
                    AND   Letter__c IN :letterId
            ];

            if (!listPhoto.isEmpty()) {
                Map<String, String> mapReqBody;
                List<Map<String, String>> listReqBody = new List<Map<String, String>>();
                String filename;
                for (LetterPicture__c ph : listPhoto){
                    mapReqBody = new Map<String, String>();

                    filename = 'pdfTest' + Datetime.now().format('yyyyMMddHHmmss') + '.pdf';
                    mapReqBody.put('url', ph.fm_PictureDir__c); // 파일
                    mapReqBody.put('fileName', filename); // 파일명

                    listReqBody.add(mapReqBody);
                }

                String fRequestBody = JSON.serialize(listReqBody);

                /*String endpoint = 'https://sfdc.sc.or.kr/app/pdfMerge';*/
                DmzServerInfo__c objDmzServerInfo = DmzServerInfo__c.getOrgDefaults();
                String endpoint = objDmzServerInfo.Domain__c + '/pdfMerge';

                HttpRequest request = new HttpRequest();
                HttpResponse response = new HttpResponse();
                Http http = new Http();
                String responseBody = null;

                System.debug('--------------------------');
                System.debug('woon :: ' + fRequestBody);
                System.debug('--------------------------');

                request.setMethod('POST');
                request.setEndpoint(endpoint);
                request.setTimeout(110000);
                request.setHeader('Content-Type', 'application/json');
                request.setBody(fRequestBody);

                response = http.send(request);
                System.debug('response :: ' + response);

                if (response.getStatusCode() == 200) {
                    responseBody = response.getBody();
                    System.debug('responseBody :: ' + responseBody);
                    Map<String, Object> mapObject = (Map<String, Object>)JSON.deserializeUntyped(responseBody);
                    String downloadUrl = (String)mapObject.get('fileDownloadUri');
                    result = 'success^||^' + downloadUrl;
                }
            }
        }
        catch (Exception e) {
            result = 'error^||^' + e.getMessage();
        }
        return result;
    }

    @InvocableMethod(Label = 'LetterMakePDF')
    public static void getInitData(List<String> listLetterId) {
        System.debug(listLetterId);
        try {
            Set<String> targetId = new Set<String>();
            for(String letterId :listLetterId){
                targetId.add(letterId);
            }

            // 기존 PDF 삭제
            List<LetterPicture__c> listPictures = new List<LetterPicture__c>();
            listPictures = [
                SELECT Id, Letter__r.Name, PictureDir__c, fm_PictureDir__c
                FROM LetterPicture__c
                WHERE isPDF__c = TRUE
                AND   Letter__c IN :targetId
            ];
            if (!listPictures.isEmpty()) {
                delete listPictures;
            }

            List<Letter__c> listLetter = new List<Letter__c>();
            listLetter = [
                    SELECT Id, Name, TextLetter__c, Type__c
                            , Contact__c, Contact__r.LastName, Contact__r.EngLastName__c, Contact__r.EngFirstName__c, Contact__r.ContactNo__c
                            , Child__c, Child__r.Name, Child__r.NameKOR__c, Child__r.ChildNo__c, Child__r.Country__c
                            , LetterTemplate__r.PictureDir__c, LetterTemplate__r.fm_PictureDir__c, LetterTemplate__r.TemplateType__c
                    FROM Letter__c
                    WHERE Id IN :targetId
            ];

            System.debug(listLetter);

            if (!listLetter.isEmpty()) {
                Map<String, String> mapLetterFileName = new Map<String, String>();
                List<Attachment> listAttachment = new List<Attachment>();
                for (Letter__c objLetter : listLetter) {
                    String sLetterType = objLetter.Type__c;
                    String templateURL = '';

                    if (sLetterType == '환영편지') {
                        templateURL = '/apex/PrintWelLetter_FirstIntro';
                    }
                    else if (sLetterType == 'PAL') {
                        templateURL = '/apex/PrintPalLetter_normal';
                    }
                    else if (sLetterType == 'Thank you letter') {
                        templateURL = '/apex/PrintThankyouLetter';
                    }
                    else if (sLetterType == '아동답신') {
                        templateURL = '/apex/PrintChildLetterReply';
                    }
                    else if (sLetterType == '후원자편지') {
                        if (objLetter.LetterTemplate__r.TemplateType__c == '일반') {
                            templateURL = '/apex/PrintSponLetter_normal';
                        }
                        else if (objLetter.LetterTemplate__r.TemplateType__c == '소개') {
                            templateURL = '/apex/PrintSponLetter_introduce';
                        }
                        else if (objLetter.LetterTemplate__r.TemplateType__c == '축하') {
                            templateURL = '/apex/PrintSponLetter_celebration';
                        }
                        else if (objLetter.LetterTemplate__r.TemplateType__c == '새해') {
                            templateURL = '/apex/PrintSponLetter_NewYear';
                        }
                    }

                    System.debug('templateURL :: ' + templateURL);

                    PageReference pageRef = new PageReference(templateURL);
                    pageRef.getParameters().put('letterId', objLetter.Id);

                    Blob bPage;

                    if(Test.isRunningTest()) {
                        bPage = Blob.valueOf('Test');
                    }else {
                        bPage = pageRef.getContentAsPDF();
                    }

                    Attachment objAttachment = new Attachment();

                    String strFileName = objLetter.Name + '_' + Datetime.now().format('yyyyMMddHHmmss') + '.pdf';
//                    String strFileName = objLetter.Name + '_' + Datetime.now().format('yyyyMMddHHmmss');

                    objAttachment.ParentId = objLetter.Id;
                    objAttachment.Body = bPage;
                    objAttachment.Name = strFileName;
                    objAttachment.ContentType = 'application/pdf';

                    listAttachment.add(objAttachment);

                    mapLetterFileName.put(objLetter.Id, strFileName);
                }

                System.debug('woon ======================> doMakeLetter before listAttachment : ' + listAttachment);

                if (listAttachment <> null && listAttachment.size() > 0) {
                    insert listAttachment;

                    System.debug('woon ======================> doMakeLetter after listAttachment : ' + listAttachment);

                    List<ContentVersion> listContentVersion = new List<ContentVersion>();

                    for (Attachment objAttachReq : listAttachment) {
                        ContentVersion objContentVersion = new ContentVersion();
                        objContentVersion.Title = objAttachReq.Name;
                        objContentVersion.VersionData = objAttachReq.Body;
                        objContentVersion.PathOnClient = objAttachReq.Name;

                        listContentVersion.add(objContentVersion);
                    }
                    if (listContentVersion <> null && listContentVersion.size() > 0) {
                        insert listContentVersion;

                        Set<Id> setContentVersionId = new Set<Id>();

                        for (ContentVersion obj : listContentVersion) {
                            setContentVersionId.add(obj.Id);
                        }

                        Map<String, String> mapReqBody = new Map<String, String>();
                        List<Map<String, String>> listReqBody = new List<Map<String, String>>();

                        for (ContentVersion objVersion : [
                                SELECT  Id, ContentDocumentId, ContentSize, PathOnClient, VersionData, FileType, FileExtension, Title
                                FROM    ContentVersion
                                WHERE   Id In:setContentVersionId])
                        {

                            Blob strImageBlob = objVersion.VersionData;

                            mapReqBody.put('file', EncodingUtil.base64Encode(strImageBlob)); // 파일
                            mapReqBody.put('name', objVersion.Title); // 파일명
                            mapReqBody.put('ext', objVersion.FileExtension); // 파일확장자
                            mapReqBody.put('filetype', 'letter'); // 상위 폴더
                            mapReqBody.put('type', 'PDF'); // 상위 폴더

                            listReqBody.add(mapReqBody);
                        }
                        String fRequestBody = JSON.serialize(listReqBody);

                        System.debug('fRequestBody :: ' + fRequestBody);

                        serverCallOut(fRequestBody, listLetter[0].Id);
                    }
                }
            }
        } catch(Exception e) {
//            this.isError = true;
            System.debug('woon ===================> Error : '+e.getMessage());
        }
    }

    // 원본파일 서버 전송
    @Future(Callout=true)
    public static void serverCallOut(String fRequestBody, String recordId) {
        //  Check if it is sandbox or production
        Boolean runningInASandbox = [SELECT IsSandbox FROM Organization LIMIT 1].IsSandbox;

        /*String endpoint = '';
        if(runningInASandbox){
            endpoint = 'https://sfdc.sc.or.kr/app/fileUpload'; // 개발 sfdcdev 안정화 되면 변경예정
        }else{
            endpoint = 'https://sfdc.sc.or.kr/app/fileUpload'; // 운영
        }*/
        DmzServerInfo__c objDmzServerInfo = DmzServerInfo__c.getOrgDefaults();
        String endpoint = objDmzServerInfo.Domain__c + '/fileUpload';

        HttpRequest request = new HttpRequest();
        HttpResponse response = new HttpResponse();
        Http http = new Http();
        String responseBody = null;

        System.debug('--------------------------');
        System.debug('woon :: ' + fRequestBody);
        System.debug('--------------------------');

        request.setMethod('POST');
        request.setEndpoint(endpoint);
        request.setTimeout(110000);
        request.setHeader('Content-Type', 'application/json');
        request.setBody(fRequestBody);
        //request.setClientCertificateName('relay');`

        response = http.send(request);
        System.debug('response :: ' + response);

        if (response.getStatusCode() == 200) {
            responseBody = response.getBody();
            System.debug('responseBody :: ' + responseBody);
            List<Object> listObject = (List<Object>)JSON.deserializeUntyped(responseBody);
            System.debug(listObject);

            LetterPicture__c letterPicture;
            List<LetterPicture__c> listPicture = new List<LetterPicture__c>();
            for (Object target : listObject){
                Map<String, Object> mapResBody = (Map<String, Object>) target;

                letterPicture = new LetterPicture__c();
                letterPicture.Letter__c = recordId;
                letterPicture.PictureDir__c = String.valueOf(mapResBody.get('fileDownloadUri'));
                letterPicture.isPDF__c = true;
                listPicture.add(letterPicture);
            }

            if (!listPicture.isEmpty()) {
                insert listPicture;
            }
        }
    }
}